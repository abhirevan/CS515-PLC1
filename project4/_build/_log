### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends
# Target: assert.mli.depends, tags: { extension:mli, file:assert.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules assert.mli > assert.mli.depends
# Target: ast.mli.depends, tags: { extension:mli, file:ast.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ast.mli > ast.mli.depends
# Target: cunit.mli.depends, tags: { extension:mli, file:cunit.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules cunit.mli > cunit.mli.depends
# Target: x86simplified.mli.depends, tags: { extension:mli, file:x86simplified.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules x86simplified.mli > x86simplified.mli.depends
# Target: x86simplified.cmi, tags: { byte, compile, extension:mli, file:x86simplified.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o x86simplified.cmi x86simplified.mli
# Target: gradedtests.ml.depends, tags: { extension:ml, file:gradedtests.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules gradedtests.ml > gradedtests.ml.depends
# Target: assert.cmi, tags: { byte, compile, extension:mli, file:assert.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o assert.cmi assert.mli
# Target: ast.cmi, tags: { byte, compile, extension:mli, file:ast.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o ast.cmi ast.mli
# Target: ctxt.mli.depends, tags: { extension:mli, file:ctxt.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ctxt.mli > ctxt.mli.depends
# Target: ll.mli.depends, tags: { extension:mli, file:ll.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ll.mli > ll.mli.depends
# Target: ll.cmi, tags: { byte, compile, extension:mli, file:ll.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o ll.cmi ll.mli
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexer.ml > lexer.ml.depends
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.mli > parser.mli.depends
# Target: range.mli.depends, tags: { extension:mli, file:range.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules range.mli > range.mli.depends
# Target: range.cmi, tags: { byte, compile, extension:mli, file:range.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o range.cmi range.mli
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o parser.cmi parser.mli
# Target: occ.ml.depends, tags: { extension:ml, file:occ.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules occ.ml > occ.ml.depends
# Target: cunit.cmi, tags: { byte, compile, extension:mli, file:cunit.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o cunit.cmi cunit.mli
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexer.cmo lexer.ml
# Target: LibUtil.mli.depends, tags: { extension:mli, file:LibUtil.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules LibUtil.mli > LibUtil.mli.depends
# Target: phase1.mli.depends, tags: { extension:mli, file:phase1.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules phase1.mli > phase1.mli.depends
# Target: phase2.mli.depends, tags: { extension:mli, file:phase2.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules phase2.mli > phase2.mli.depends
# Target: platform.mli.depends, tags: { extension:mli, file:platform.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules platform.mli > platform.mli.depends
# Target: LibUtil.cmi, tags: { byte, compile, extension:mli, file:LibUtil.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o LibUtil.cmi LibUtil.mli
# Target: phase1.cmi, tags: { byte, compile, extension:mli, file:phase1.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o phase1.cmi phase1.mli
# Target: phase2.cmi, tags: { byte, compile, extension:mli, file:phase2.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o phase2.cmi phase2.mli
# Target: platform.cmi, tags: { byte, compile, extension:mli, file:platform.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o platform.cmi platform.mli
# Target: ctxt.cmi, tags: { byte, compile, extension:mli, file:ctxt.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o ctxt.cmi ctxt.mli
# Target: occ.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:occ.cmo, file:occ.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o occ.cmo occ.ml
# Target: Oconfig.mli.depends, tags: { extension:mli, file:Oconfig.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules Oconfig.mli > Oconfig.mli.depends
# Target: providedtests.ml.depends, tags: { extension:ml, file:providedtests.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules providedtests.ml > providedtests.ml.depends
# Target: gradedtests.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gradedtests.cmo, file:gradedtests.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o gradedtests.cmo gradedtests.ml
# Target: Oconfig.cmi, tags: { byte, compile, extension:mli, file:Oconfig.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o Oconfig.cmi Oconfig.mli
# Target: providedtests.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:providedtests.cmo, file:providedtests.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o providedtests.cmo providedtests.ml
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o main.cmo main.ml
# Target: assert.ml.depends, tags: { extension:ml, file:assert.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules assert.ml > assert.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ast.ml > ast.ml.depends
# Target: cunit.ml.depends, tags: { extension:ml, file:cunit.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules cunit.ml > cunit.ml.depends
# Target: x86simplified.ml.depends, tags: { extension:ml, file:x86simplified.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules x86simplified.ml > x86simplified.ml.depends
# Target: x86simplified.cmx, tags: { compile, extension:cmx, extension:ml, file:x86simplified.cmx, file:x86simplified.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o x86simplified.cmx x86simplified.ml
# Target: assert.cmx, tags: { compile, extension:cmx, extension:ml, file:assert.cmx, file:assert.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o assert.cmx assert.ml
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o ast.cmx ast.ml
# Target: ctxt.ml.depends, tags: { extension:ml, file:ctxt.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ctxt.ml > ctxt.ml.depends
# Target: LibUtil.ml.depends, tags: { extension:ml, file:LibUtil.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules LibUtil.ml > LibUtil.ml.depends
# Target: ll.ml.depends, tags: { extension:ml, file:ll.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ll.ml > ll.ml.depends
# Target: LibUtil.cmx, tags: { compile, extension:cmx, extension:ml, file:LibUtil.cmx, file:LibUtil.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o LibUtil.cmx LibUtil.ml
# Target: ll.cmx, tags: { compile, extension:cmx, extension:ml, file:ll.cmx, file:ll.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o ll.cmx ll.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.ml > parser.ml.depends
# Target: range.ml.depends, tags: { extension:ml, file:range.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules range.ml > range.ml.depends
# Target: range.cmx, tags: { compile, extension:cmx, extension:ml, file:range.cmx, file:range.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o range.cmx range.ml
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o parser.cmx parser.ml
# Target: cunit.cmx, tags: { compile, extension:cmx, extension:ml, file:cunit.cmx, file:cunit.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o cunit.cmx cunit.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o lexer.cmx lexer.ml
# Target: phase1.ml.depends, tags: { extension:ml, file:phase1.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules phase1.ml > phase1.ml.depends
# Target: phase2.ml.depends, tags: { extension:ml, file:phase2.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules phase2.ml > phase2.ml.depends
# Target: platform.ml.depends, tags: { extension:ml, file:platform.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules platform.ml > platform.ml.depends
# Target: platform.cmx, tags: { compile, extension:cmx, extension:ml, file:platform.cmx, file:platform.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o platform.cmx platform.ml
# Target: phase1.cmx, tags: { compile, extension:cmx, extension:ml, file:phase1.cmx, file:phase1.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o phase1.cmx phase1.ml
# Target: phase2.cmx, tags: { compile, extension:cmx, extension:ml, file:phase2.cmx, file:phase2.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o phase2.cmx phase2.ml
+ /usr/bin/ocamlopt -c -o phase2.cmx phase2.ml
File "phase2.ml", line 8, characters 8-18:
Warning 26: unused variable block_name.
# Target: ctxt.cmx, tags: { compile, extension:cmx, extension:ml, file:ctxt.cmx, file:ctxt.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o ctxt.cmx ctxt.ml
# Target: occ.cmx, tags: { compile, extension:cmx, extension:ml, file:occ.cmx, file:occ.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o occ.cmx occ.ml
# Target: Oconfig.ml.depends, tags: { extension:ml, file:Oconfig.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules Oconfig.ml > Oconfig.ml.depends
# Target: gradedtests.cmx, tags: { compile, extension:cmx, extension:ml, file:gradedtests.cmx, file:gradedtests.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o gradedtests.cmx gradedtests.ml
# Target: Oconfig.cmx, tags: { compile, extension:cmx, extension:ml, file:Oconfig.cmx, file:Oconfig.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o Oconfig.cmx Oconfig.ml
# Target: providedtests.cmx, tags: { compile, extension:cmx, extension:ml, file:providedtests.cmx, file:providedtests.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o providedtests.cmx providedtests.ml
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o main.cmx main.ml
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt str.cmxa unix.cmxa LibUtil.cmx Oconfig.cmx assert.cmx ast.cmx x86simplified.cmx ll.cmx ctxt.cmx cunit.cmx range.cmx parser.cmx lexer.cmx phase1.cmx platform.cmx phase2.cmx occ.cmx gradedtests.cmx providedtests.cmx main.cmx -o main.native
# Compilation successful.
